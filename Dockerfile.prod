# pull official base image
FROM python:3.8-alpine
LABEL MAINTAINER="Brian Arriaga brian.arriaga@gmail.com"

# set system-wide environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV DJANGO_SETTINGS_MODULE app.settings.production
ENV WEB_CONCURRENCY 3
ENV REACT_APP_DJANGO_SERVER https://django-rental-movie-app.herokuapp.com/api/

# install system-wide dependencies

# Install curl, node, & yarn
RUN apk add --update curl \
    && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apk add --update nodejs \
    && curl -o- -L https://yarnpkg.com/install.sh | bash

RUN apk update
RUN apk add postgresql-client jpeg-dev libjpeg
RUN apk add --virtual .tmp-build-deps \
      gcc libc-dev linux-headers postgresql-dev musl-dev \
      zlib zlib-dev python3-dev libffi-dev openssl-dev cargo

# Install Python dependencies
COPY ./requirements.txt /requirements.txt
RUN pip install --upgrade pip
RUN pip install -r /requirements.txt

# Remove unnecessary dependencies
RUN apk del .tmp-build-deps

# set work directory
RUN mkdir /app
WORKDIR /app

# copy front end to compile it
COPY ./frontend /app
# Install front-end dependencies.
RUN $HOME/.yarn/bin/yarn install
# Compile static files
RUN $HOME/.yarn/bin/yarn build:prod

# Have to move all static files other than index.html to root/
# for whitenoise middleware
WORKDIR /app/build

RUN mkdir root && mv *.ico *.js *.json root

WORKDIR /app

# copy project
COPY ./backend /app
COPY ./backend/scripts/ /app/

# make static and media root
RUN mkdir -p /vol/web/media
RUN mkdir -p /vol/web/static

# Install assets
RUN python manage.py collectstatic --noinput --clear

EXPOSE $PORT

RUN ["chmod", "+x", "/app/entrypoint-prod.sh"]
ENTRYPOINT ["/app/entrypoint-prod.sh"]